<Microsoft.MobileBlazorBindings.Elements.ContentPage BackgroundColor="Color.FloralWhite">
    <StyleSheet Resource="Exercises.css" Assembly="GetType().Assembly"></StyleSheet>
    <Microsoft.MobileBlazorBindings.Elements.ScrollView>
        <Microsoft.MobileBlazorBindings.Elements.StackLayout HorizontalOptions="LayoutOptions.Center">
            @foreach (var item in items)
            {
                <Microsoft.MobileBlazorBindings.Elements.Frame BorderColor="Color.Gray" CornerRadius="5" Padding="8" WidthRequest="300">
                    <Microsoft.MobileBlazorBindings.Elements.StackLayout>
                        <Microsoft.MobileBlazorBindings.Elements.StackLayout Orientation="StackOrientation.Horizontal">
                            <Microsoft.MobileBlazorBindings.Elements.Label Text="@(item.Name + ": " + item.AmountLeft + " / " + item.AmountTotal)" class="redText" VerticalTextAlignment="TextAlignment.Center" HorizontalOptions="LayoutOptions.FillAndExpand" HorizontalTextAlignment="TextAlignment.Start" />
                            <Microsoft.MobileBlazorBindings.Elements.CheckBox IsChecked="@item.Done" IsCheckedChanged="@(() => FinishWorkOutItem(item))" HorizontalOptions="LayoutOptions.End" />
                        </Microsoft.MobileBlazorBindings.Elements.StackLayout>
                        <Microsoft.MobileBlazorBindings.Elements.StackLayout>
                            <Microsoft.MobileBlazorBindings.Elements.BoxView Color="Color.Gray" HeightRequest="2" HorizontalOptions="LayoutOptions.Fill" />
                            <Microsoft.MobileBlazorBindings.Elements.Label Text="Im not sure what goes here" />
                        </Microsoft.MobileBlazorBindings.Elements.StackLayout>
                    </Microsoft.MobileBlazorBindings.Elements.StackLayout>
</Microsoft.MobileBlazorBindings.Elements.Frame>
            }
        </Microsoft.MobileBlazorBindings.Elements.StackLayout>

    </Microsoft.MobileBlazorBindings.Elements.ScrollView>
</Microsoft.MobileBlazorBindings.Elements.ContentPage>
@code {
    [Parameter] public WorkOutItemDatabase database { get; set; }
    List<WorkOutItem> items;


    protected override Task OnInitializedAsync()
    {
        RefreshItems();
        return base.OnInitializedAsync();
    }


    void RefreshItems()
    {
        items = database.GetItemsAsync().Result;
    }

    void FinishWorkOutItem(WorkOutItem item)
    {
        item.Done = true;
        database.SaveItemAsync(item);
        //items.Remove(item);
        RefreshItems();
        //base.InvokeAsync(StateHasChanged);
    }
}