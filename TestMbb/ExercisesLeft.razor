<Microsoft.MobileBlazorBindings.Elements.ContentPage BackgroundColor="Color.FloralWhite">
    <StyleSheet Resource="Exercises.css" Assembly="GetType().Assembly"></StyleSheet>
    <Microsoft.MobileBlazorBindings.Elements.ScrollView>
        <Microsoft.MobileBlazorBindings.Elements.StackLayout HorizontalOptions="LayoutOptions.Center">
            @foreach (var item in database.items.Where(x => !x.Done).OrderByDescending(y => y.ID))
            {
                <Microsoft.MobileBlazorBindings.Elements.Frame BorderColor="Color.Gray"
                                                               CornerRadius="5"
                                                               Margin="new Thickness(8, 2, 8, 2)"
                                                               WidthRequest="300">
                    <Microsoft.MobileBlazorBindings.Elements.StackLayout>
                        <Microsoft.MobileBlazorBindings.Elements.StackLayout Orientation="StackOrientation.Horizontal">
                            <Microsoft.MobileBlazorBindings.Elements.Label Text="@(item.Game + " | " + item.ID + " |  " + item.Name + ": " + item.AmountLeft + " / " + item.AmountTotal)"
                                                                           class="redText"
                                                                           VerticalTextAlignment="TextAlignment.Center"
                                                                           HorizontalOptions="LayoutOptions.FillAndExpand"
                                                                           HorizontalTextAlignment="TextAlignment.Start"
                                                                           IsEnabled="@(!item.Done)" />
                            <Microsoft.MobileBlazorBindings.Elements.Button OnClick="@(() => FinishOne(item))"
                                                                            HorizontalOptions="LayoutOptions.FillAndExpand"
                                                                            VerticalOptions="LayoutOptions.FillAndExpand"
                                                                            Text="Take one off" />
                            <Microsoft.MobileBlazorBindings.Elements.Button OnClick="@(() => FinishWorkOutItem(item))"
                                                                            BackgroundColor="Color.Transparent"
                                                                            TextColor="Color.Red"
                                                                            FontSize="26"
                                                                            WidthRequest="48"
                                                                            Text="☐" />
                        </Microsoft.MobileBlazorBindings.Elements.StackLayout>
                        <Microsoft.MobileBlazorBindings.Elements.StackLayout>
                            <Microsoft.MobileBlazorBindings.Elements.BoxView Color="Color.Gray" HeightRequest="2" HorizontalOptions="LayoutOptions.Fill" />
                            <Microsoft.MobileBlazorBindings.Elements.Label Text="@(item.Description)" />
                        </Microsoft.MobileBlazorBindings.Elements.StackLayout>
                    </Microsoft.MobileBlazorBindings.Elements.StackLayout>
                </Microsoft.MobileBlazorBindings.Elements.Frame>
            }
        </Microsoft.MobileBlazorBindings.Elements.StackLayout>

    </Microsoft.MobileBlazorBindings.Elements.ScrollView>
</Microsoft.MobileBlazorBindings.Elements.ContentPage>
@code {
    [Parameter] public WorkOutItemDatabase database { get; set; }

    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }

    protected override Task OnInitializedAsync()
    {
        database.OnNavigated += () =>
        {
            RefreshItems();
            this.StateHasChanged();
        };
        return base.OnInitializedAsync();
    }

    async Task RefreshItems()
    {
        await database.RefreshItems();
        this.StateHasChanged();
    }

    async void FinishOne(WorkOutItem item)
    {
        item.AmountLeft--;
        if (item.AmountLeft == 0)
        {
            item.Done = true;
        }
        await database.SaveItemAsync(item);
        await RefreshItems();
    }

    async void FinishWorkOutItem(WorkOutItem item)
    {
        item.AmountLeft = 0;
        item.Done = true;
        await database.SaveItemAsync(item);
        await RefreshItems();
    }
}